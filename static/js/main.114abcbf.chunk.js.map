{"version":3,"sources":["components/_common/progressBar.jsx","components/media/player.jsx","components/media/listItem.jsx","components/media/list.jsx","components/media/media.jsx","components/media/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Tracker","ProgressInTracker","attrs","p","style","width","elapsedTime","progressBar","props","currentTime","duration","handleClickBar","onClick","id","ImageContainer","PlayerControl","SongDetail","Icon","FontAwesomeIcon","Play","Player","state","track","audioPlayer","Audio","playing","repeat","shuffle","playPause","bind","this","addEventListener","e","target","setState","changeTrack","parseInt","removeEventListener","pause","play","parentElement","barLeftX","getBoundingClientRect","left","barWidth","newTime","clientX","a","display","color","src","albumCover","alt","icon","faRandom","size","changeFontColor","faStepBackward","changeVisibiliy","faPlay","faPause","faStepForward","faUndo","artist","nextProps","prevState","file","Component","listItem","song","list","songs","map","i","key","PlayerWrapper","media","axios","get","then","res","data","currentTrack","random","Math","floor","length","MediaWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.114abcbf.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  padding: 0% 10%;\n`;\nconst Tracker = styled.div`\n  width: 100%;\n  height: 6px;\n  margin: 15px auto;\n  background: #001624;\n  border-radius: 3px;\n  box-shadow: inset 0 0 5px #000;\n  cursor: pointer;\n`;\nconst ProgressInTracker = styled.div.attrs(p => ({\n  style: {\n    width: p.elapsedTime + \"%\"\n  }\n}))`\n  height: 100%;\n  background: #03e2a9;\n  border-radius: 3px;\n`;\n\nexport default function progressBar(props) {\n  const { currentTime, duration, handleClickBar } = props;\n  let elapsedTime = (currentTime / duration) * 100;\n  return (\n    <Wrapper>\n      <Tracker onClick={handleClickBar}>\n        <ProgressInTracker\n          elapsedTime={elapsedTime}\n          id=\"innerBar\"\n        ></ProgressInTracker>\n      </Tracker>\n    </Wrapper>\n  );\n}\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faUndo,\n  faStepForward,\n  faStepBackward,\n  faRandom,\n  faPause\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ProgressBar from \"../_common/progressBar\";\n\nconst Wrapper = styled.div`\n  flex: 3;\n  display: flex;\n  flex-direction: column;\n  @media screen and (max-width: 720px) {\n    flex: 2;\n  }\n`;\nconst ImageContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 300px;\n  img {\n    width: 250px;\n    height: 250px;\n    border-radius: 10px;\n    background: rgba(0, 0, 0, 0.8);\n  }\n`;\nconst PlayerControl = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 20px 40px;\n  min-height: 40px;\n  color: #013e63;\n`;\nconst SongDetail = styled.div`\n  text-align: center;\n  color: white;\n`;\nconst Icon = styled(FontAwesomeIcon)`\n  margin: 20px;\n  &:hover {\n    color: #001624;\n    cursor: pointer;\n  }\n`;\nconst Play = styled.div`\n  width: 40px;\n  height: 40px;\n  border-radius: 100%;\n  border: 6px solid #012136;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  color: #012136;\n  &:hover {\n    border: 6px solid #00131f;\n    cursor: pointer;\n    path {\n      color: #00131f;\n    }\n  }\n`;\nclass Player extends Component {\n  constructor() {\n    super();\n    this.state = {\n      track: {},\n      audioPlayer: new Audio(),\n      duration: 0,\n      currentTime: 0,\n      playing: false,\n      repeat: false,\n      shuffle: false\n    };\n    this.playPause = this.playPause.bind(this);\n    this.handleClickBar = this.handleClickBar.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n    this.repeat = this.repeat.bind(this);\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.track !== prevState.track) {\n      let { audioPlayer, playing } = { ...prevState };\n      audioPlayer.src = nextProps.track.file;\n      if (prevState.duration !== 0) {\n        audioPlayer.play();\n        playing = true;\n      }\n      return { track: nextProps.track, audioPlayer, playing };\n    }\n    return null;\n  }\n  componentDidMount() {\n    const { audioPlayer } = this.state;\n    audioPlayer.addEventListener(\"timeupdate\", e => {\n      let { currentTime } = e.target;\n      this.setState({ currentTime });\n    });\n    audioPlayer.addEventListener(\"durationchange\", e => {\n      let { duration } = e.target;\n      this.setState({ duration });\n    });\n    audioPlayer.addEventListener(\"ended\", e => {\n      const { track, repeat, shuffle } = this.state;\n      this.props.changeTrack(parseInt(track.id), repeat, shuffle);\n    });\n  }\n  componentWillUnmount() {\n    const { audioPlayer } = this.state;\n    audioPlayer.removeEventListener(\"timeupdate\");\n    audioPlayer.removeEventListener(\"durationchange\");\n    audioPlayer.removeEventListener(\"ended\");\n  }\n  playPause() {\n    const { audioPlayer, playing } = { ...this.state };\n    playing ? audioPlayer.pause() : audioPlayer.play();\n    this.setState({ playing: !playing });\n  }\n  handleClickBar(e) {\n    const target = e.target.id ? e.target.parentElement : e.target;\n    const { audioPlayer, duration } = { ...this.state };\n    // Getting X Coordinates\n    const barLeftX = target.getBoundingClientRect().left;\n    const barWidth = target.getBoundingClientRect().width;\n    const elapsedDistanceX = e.clientX - barLeftX;\n    // Translating coordinates to elapsedTime\n    const newTime = (elapsedDistanceX * duration) / barWidth;\n    // Updating currentTime\n    audioPlayer.currentTime = newTime;\n    this.setState({ audioPlayer });\n  }\n  changeVisibiliy(a) {\n    if (a) return { display: \"flex\" };\n    return { display: \"none\" };\n  }\n  changeFontColor(a) {\n    if (a) return { color: \"black\" };\n    return {};\n  }\n  repeat() {\n    const { repeat } = this.state;\n    this.setState({ repeat: !repeat });\n  }\n  shuffle() {\n    const { shuffle } = this.state;\n    this.setState({ shuffle: !shuffle });\n  }\n  resetTime() {\n    this.setState({ currentTime: 0 });\n  }\n  render() {\n    const {\n      track,\n      currentTime,\n      duration,\n      playing,\n      shuffle,\n      repeat\n    } = this.state;\n    const { changeTrack } = this.props;\n    return (\n      <Wrapper>\n        <ImageContainer>\n          <img src={track.albumCover} alt=\"\" />\n        </ImageContainer>\n        <ProgressBar\n          duration={duration}\n          currentTime={currentTime}\n          handleClickBar={this.handleClickBar}\n        ></ProgressBar>\n        <PlayerControl>\n          <Icon\n            onClick={this.shuffle}\n            icon={faRandom}\n            size=\"lg\"\n            style={this.changeFontColor(shuffle)}\n          />\n          <Icon\n            onClick={() => changeTrack(parseInt(track.id) - 2, repeat, shuffle)}\n            icon={faStepBackward}\n            size=\"lg\"\n          />\n          <Play onClick={this.playPause} style={this.changeVisibiliy(!playing)}>\n            <Icon icon={faPlay} size=\"lg\" />\n          </Play>\n          <Play onClick={this.playPause} style={this.changeVisibiliy(playing)}>\n            <Icon icon={faPause} size=\"lg\" />\n          </Play>\n          <Icon\n            onClick={() => changeTrack(parseInt(track.id), repeat, shuffle)}\n            icon={faStepForward}\n            size=\"lg\"\n          />\n          <Icon\n            onClick={this.repeat}\n            icon={faUndo}\n            size=\"lg\"\n            style={this.changeFontColor(repeat)}\n          />\n        </PlayerControl>\n        <SongDetail>\n          <h1>{track.track || \"Track Title\"}</h1>\n          <p>{track.artist || \"Artist Name\"}</p>\n        </SongDetail>\n      </Wrapper>\n    );\n  }\n}\n\nexport default Player;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  padding: 15px 10px;\n  margin: 0px 10px;\n  display: flex;\n  border-bottom: 1px solid #dedede;\n  align-items: center;\n  color: white;\n  img {\n    width: 75px;\n    height: 75px;\n    border-radius: 5px;\n    background: rgba(0, 0, 0, 0.8);\n    margin-right: 10px;\n  }\n  h3 {\n    margin: 0;\n  }\n  p {\n    margin: 10px 0px;\n  }\n  div {\n    margin: 20px 0px;\n  }\n  &:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`;\n\nexport default function listItem({ song }) {\n  return (\n    <Wrapper>\n      <img src={song.albumCover} alt=\"\" />\n      <div>\n        <h3>{song.track}</h3>\n        <p>{song.artist}</p>\n      </div>\n    </Wrapper>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ListItem from \"./listItem\";\n\nconst Wrapper = styled.div`\n  flex: 2;\n  overflow-y: scroll;\n  max-height: 600px;\n  border-left: 1px solid #dedede;\n  &::-webkit-scrollbar {\n    width: 7px;\n    background: rgba(0, 0, 0, 0.3);\n    border-radius: 4px;\n  }\n  &::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, 0.8);\n  }\n  @media screen and (max-width: 720px) {\n    flex: 2;\n    min-height: 400px;\n    border-left: none;\n  }\n`;\n\nexport default function list({ songs, changeTrack }) {\n  return (\n    <Wrapper>\n      {songs.map(i => (\n        <div key={i.id} onClick={() => changeTrack(parseInt(i.id) - 1)}>\n          <ListItem song={i}></ListItem>\n        </div>\n      ))}\n    </Wrapper>\n  );\n}\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport Player from \"./player\";\nimport List from \"./list\";\nimport axios from \"axios\";\n\nconst PlayerWrapper = styled.div`\n  background: #006488;\n  box-shadow: 5px 5px 19px 3px rgba(0, 0, 0, 0.93);\n  width: 80%;\n  min-height: 600px;\n  border-radius: 10px;\n  padding: 30px;\n  display: flex;\n  justify-content: space-between;\n  @media screen and (max-width: 720px) {\n    width: 100%;\n    flex-direction: column;\n    height: 100%;\n    overflow: scroll;\n  }\n`;\n\nexport default class Media extends Component {\n  constructor() {\n    super();\n    this.state = {\n      songs: [],\n      track: {}\n    };\n    this.changeTrack = this.changeTrack.bind(this);\n  }\n  componentDidMount() {\n    axios\n      .get(`https://5dd1894f15bbc2001448d28e.mockapi.io/playlist`)\n      .then(res => {\n        const songs = res.data;\n        this.setState({ songs });\n        this.changeTrack(0);\n      });\n  }\n  changeTrack(id, repeat = false, shuffle = false) {\n    const { songs, track: currentTrack } = this.state;\n    let track = songs[id] || songs[0];\n    let random = Math.floor(Math.random() * songs.length);\n    if (shuffle) track = songs[random];\n    if (repeat) track = songs[parseInt(currentTrack.id) - 1];\n    this.setState({ track });\n  }\n  render() {\n    return (\n      <PlayerWrapper>\n        <Player\n          track={this.state.track}\n          changeTrack={this.changeTrack}\n        ></Player>\n        <List songs={this.state.songs} changeTrack={this.changeTrack}></List>\n      </PlayerWrapper>\n    );\n  }\n}\n","import media from \"./media\";\nexport default media;\n","import React from \"react\";\nimport Media from \"./components/media\";\nimport styled from \"styled-components\";\n\nconst MediaWrapper = styled.div`\n  background: rgb(4, 158, 153);\n  background: linear-gradient(\n    90deg,\n    rgba(4, 158, 153, 1) 0%,\n    rgba(2, 120, 204, 1) 50%,\n    rgba(0, 187, 255, 1) 100%\n  );\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction App() {\n  return (\n    <MediaWrapper>\n      <Media></Media>\n    </MediaWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}